/* Mixins */
.list-unstyled {
  list-style: none;
  padding: 0;
  margin: 0;
}
//Header
#header {
  background-color: burlywood;
}

.link-dont-generate() {
  text-decoration: none;
  color: black;
}

.nav {
  .list-unstyled();
  #header();
  a {
    .link-dont-generate();
  }
}

.rounded-courner(@radius: 4px) {
  border-radius: @radius;
}

.rounded {
  .rounded-courner();
}
.rounded-lg {
  .rounded-courner(8px);
}

/* Namespace */
@has-border: true;

#border {
  .border(@width: 2px, @style: solid, @color: black) when (@has-border = true) {
    border: @width @style @color;
  }
  .border-top(@width: 2px, @style: solid, @color: black) {
    border-top: @width @style @color;
  }
  .border-bottom(@width: 2px, @style: solid, @color: black) {
    border-bottom: @width @style @color;
  }

  .border-radius(@radius: 4px) {
    border-radius: @radius;
  }
}

.card {
  #border.border();
  #border.border-radius();
}
/********* important **********/
.foo (@bg: #f5f5f5; @color: #900) {
  background: @bg;
  color: @color;
}
.unimportant {
  .foo();
}
.important {
  .foo() !important;
}

/******* Mixin as Function *********/
.average(@x, @y) {
  @result: ((@x + @y) / 2);
}

div {
  // call a mixin and look up its "@result" value
  padding: .average(16px, 50px) [ @result];
}


#library() {
    .colors() {
      background: green;
    }
  }
  .box {
    #library.colors();
  }

  .box1{
    @alias: #library.colors();

    @alias();
  }